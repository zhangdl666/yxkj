<?php
/**
 * Author: ' Silent
 * Time: 2017/9/4 10:48
 */

namespace Pc\Controller;

use Pc\Model\HotelModel;
use Pc\Server\PhpExcel;

class ImportController extends BaseController
{
    public $model = 'hotel';
    public function _initialize()
    {
        parent::_initialize();
        // TODO: Change the autogenerated stub
    }

    // 导入的数据
    private $importData;
    // 数据库数据
    private $dataHotel;
    // 酒店分类数据
    private $dataTypes;

    public function index()
    {
        $this->display();
    }

    /**
     * 导入酒店数据
     */
    public function importHotel()
    {
        $src = I('post.src', '', 'trim');
        $filename = dirname($_SERVER['SCRIPT_FILENAME']) . $src;
        // 加载文件对象
        $infoFile = explode('.', $filename);
        $phpExcel = new PhpExcel($infoFile[1]);
        // 加载文件对象
        $fileObj = $phpExcel->getExcelObj($filename);
        // 获取第一张表
        $currentSheet = $fileObj->getSheet(0);
        // 获取总行数
        $allRow = $currentSheet->getHighestRow();
        // 自定义键
        $keys = array(
            'B' => 'name',
            'C' => 'ht_id',
            'D' => 'provice',
            'E' => 'city',
            'F' => 'county',
            'G' => 'area',
            'H' => 'tell',
            'I' => 'status'
        );
        // 数据库字段填充
        $dataList = array();
        // excel数据填充
        for ($currentRow = 2; $currentRow <= $allRow; $currentRow++) {
            // 从哪列开始，A表示第一列
            $firstAddress = 'A' . $currentRow;
            $firstValue = $currentSheet->getCell($firstAddress)->getValue();
            if ($firstValue) {
                for ($currentColumn = 'A'; $currentColumn <= 'K'; $currentColumn++) {
                    // 数据坐标
                    $address = $currentColumn . $currentRow;
                    // 读取到的数据，保存到数组$arr中
                    $value = $currentSheet->getCell($address)->getValue();
                    if ($keys[$currentColumn]) {
                        $dataList[$currentRow][$keys[$currentColumn]] = trim($value);
                    }
                }
            }
        }
        // 获取数据
        $result = array('code' => 1, 'msg' => '导入酒店信息失败');
        if (empty($dataList)) {
            $result['msg'] = '导入数据为空,请检查Excel数据后再导入';
            $this->ajaxReturn($result);
        }
        $data = array_values($dataList);
        // 数据源整改
        foreach ($data as $key => &$val) {
            $val['ctime'] = time();
            // 替换状态
            $val['status'] = $val['status'] == '营业中' ? 1 : 0;
        }
        $this->importData($data);
    }

    /**
     * 导入学生数据
     * 1.根据导入的数据集,查看数据库中酒店是否存在
     */
    public function importData($data)
    {
        $this->importData = $data;
        $listData = $this->getHotelname($data);
        $this->dataHotel = $listData;
        $HotelTypeCheckDatatus = $this->rationTypes(); // 酒店类型数据是否通过
        if ($HotelTypeCheckDatatus['checkPass'] == false) {
            $result = array('code' => 1, 'msg' => $HotelTypeCheckDatatus['error']);
            $this->ajaxReturn($result);
        }
        $HotelDataCheckDatatus = $this->rationHotel();  // 酒店数据是否通过
        if ($HotelDataCheckDatatus['checkPass'] == false) {
            $result = array('code' => 1, 'msg' => $HotelDataCheckDatatus['error']);
            $this->ajaxReturn($result);
        }
        $importInfo = $this->addHotel();  // 导入数据开始
        if ($importInfo) {
            $result = array('code' => 0, 'msg' => '导入数据成功');
            $this->ajaxReturn($result);
        }
    }

    /**
     * 检测导入数据,是否数据库酒店存在同名
     */
    public function rationHotel()
    {
        $HotelListArray = array();
        foreach ($this->importData as $key) {
            $radioStatus = $this->getDataStatus($key['name'], $this->dataHotel);
            if ($radioStatus) {
                $HotelListArray[] = $radioStatus;
            }
        }
        if (!empty($HotelListArray)) {
            $HotelList = "酒店名称为: " . implode(',', $HotelListArray) . " 已经在数据库中存在,请重新整理数据后导入";
            $Status = array('checkPass' => false, 'error' => $HotelList);
        } else {
            $Status = array('checkPass' => true, 'error' => '检测数据通过');
        }
        return $Status;
    }

    /**
     * 检测导入数据,酒店类型是否存在数据库中
     */
    public function rationTypes()
    {
        $TypeListArray = array();
        foreach ($this->importData as $key) {
            $typeName = M(HotelModel::TABLENAME_TYPE)->where(array('name' => $key['ht_id']))->find();
            if (is_null($typeName)) {
                $TypeListArray[] = $key['ht_id'];
            }
        }
        if (!empty($TypeListArray)) {
            $HotelList = "酒店类型名称为: " . implode(',', $TypeListArray) . " 在数据库中不存在,请在后台添加酒店类型";
            $Status = array('checkPass' => false, 'error' => $HotelList);
        } else {
            $Status = array('checkPass' => true, 'error' => '检测数据通过');
        }
        return $Status;
    }

    /**
     * 对比数据
     */
    private function getDataStatus($name, $dataHotel)
    {
        for ($i = 0; $i < count($dataHotel['hotel']); $i++) {
            if ($name == $dataHotel['hotel'][$i]['name']) {
                // 说明数据已经存在 提示导入失败
                return $name;
            }
        }
    }

    /**
     * 添加数据
     */
    public function addHotel()
    {
        $hotelData = $this->importData;
        $status = true;
        foreach ($hotelData as &$key) {
            $key['ht_id'] = M(HotelModel::TABLENAME_TYPE)->where(array('name' => $key['ht_id']))->getField('id');
            $HotelModel = M(HotelModel::TABLENAME_HOTEL);
            $HotelModel->startTrans();
            //调取验证规则
            $HotelAddId = $HotelModel->add($key);
            $HotelBuild = self::bulindSn($HotelAddId);
            if ($HotelModel && $HotelBuild) {
                //给销售人员推送消息
                $user_idarr = M('User')->field('id')->where(array('role_id' => 2, 'status' => 1))->select();
                if ($key['status'] && $user_idarr) {
                    $oper_title = '待处理酒店认领工单';
                    $msg_content = '您有一个酒店待认领,编号：' . $HotelBuild;
                    $user_ids = implode(',', i_array_column($user_idarr, 'id'));
                    $oper_url = 'ClaimHotel/index';
                    has_oper($msg_content, $user_ids, $oper_url, $oper_title);
                }

                $HotelModel->commit();
            } else {
                $HotelModel->rollback();
                $status = false;
                break;
            }
        }
        return $status;
    }

    /**
     * 生成酒店ID
     * @param $id
     */
    public static function bulindSn($id)
    {
        //$sn = date('Ymd') . str_pad($id, 6, "0", STR_PAD_LEFT);
        $sn = get_reimbursement_sn();
        $where = array();
        $where['id'] = array('eq', $id);
        $result = M(HotelModel::TABLENAME_HOTEL)->where($where)->save(array('sn' => $sn));
        if($result){
            return $sn;
        }else{
            return false;
        }
    }


    /**
     * 查询酒店数据
     * @param $data
     */
    public function getHotelname($data)
    {
        $hotelData = [];
        foreach ($data as $item) {
            array_push($hotelData, $item['name']);
        }
        $listHotel = implode(',', $hotelData);
        $listKeyHotel['name'] = array('in', "$listHotel");
        $HotelList = M(HotelModel::TABLENAME_HOTEL)->where($listKeyHotel)
            ->field('name')->select();
        $list['hotel'] = $HotelList;
        return $list;
    }

}